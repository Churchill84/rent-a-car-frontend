{"ast":null,"code":"import { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.registerUrl = 'http://localhost:8080/api/v1/auth/register';\n    this.authenticationUrl = `http://localhost:8080/api/v1/auth/authenticate`;\n    this.tokenSubject = new BehaviorSubject(\"\");\n    this.loggedIn = new BehaviorSubject(false);\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      this.validateToken(storedToken).subscribe(isValid => {\n        if (isValid) {\n          this.tokenSubject.next(storedToken);\n          this.loggedIn.next(true);\n        }\n      });\n    }\n  }\n  validateToken(token) {\n    // Backend endpoint to validate token\n    return this.http.post('http://localhost:8080/api/v1/auth/validate', {\n      token\n    });\n  }\n  register(user) {\n    return this.http.post(this.registerUrl, user).pipe(tap(response => {\n      if (response.access_token && response) {\n        this.saveToken(response.token);\n      }\n    }));\n  }\n  login(email, password) {\n    return this.http.post(this.authenticationUrl, {\n      email,\n      password\n    }).pipe(map(response => {\n      const token = response.access_token;\n      response.cookie('token', token, {\n        httpOnly: true,\n        secure: true // Set to true if you're using HTTPS\n        // other options like 'expires' can be set based on requirements\n      });\n      //\n      // const token = response.access_token;\n      // if (token) {\n      //     this.saveToken(token);\n      //     this.tokenSubject.next(token);\n      //     this.loggedIn.next(true);\n      // }\n      return response;\n    }), catchError(error => {\n      // Handle error and return a user-friendly message or rethrow\n      console.error('Login failed', error);\n      return throwError(() => new Error('Login failed'));\n    }));\n  }\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getTokens() {\n    return this.tokenSubject.asObservable();\n  }\n  getUserInfoFromToken() {\n    const token = this.getToken();\n    if (!token) return null;\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const payload = decodeURIComponent(atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(payload);\n    } catch (e) {\n      console.error('Error parsing token', e);\n      return null;\n    }\n  }\n  getToken() {\n    return this.tokenSubject.getValue();\n  }\n  refreshToken() {\n    // This URL and the request body might vary based on your backend implementation\n    return this.http.post('http://localhost:8080/api/v1/auth/refresh-token', {\n      refreshToken: this.getRefreshToken()\n    }).pipe(map(response => {\n      const token = response.access_token;\n      if (token) {\n        this.saveToken(token);\n        this.tokenSubject.next(token);\n      }\n      return response;\n    }));\n  }\n  getRefreshToken() {\n    // Assuming the refresh token is stored in local storage (or use a different method)\n    return localStorage.getItem('token');\n  }\n  logout() {\n    // Remove token from local storage and set subject to null\n    localStorage.removeItem('token');\n    this.tokenSubject.next(\"\");\n    this.loggedIn.next(false);\n  }\n  setLoggedIn(value) {\n    this.loggedIn.next(value);\n  }\n  isLoggedIn() {\n    return this.loggedIn.asObservable();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","catchError","tap","throwError","map","AuthService","constructor","http","registerUrl","authenticationUrl","tokenSubject","loggedIn","storedToken","localStorage","getItem","validateToken","subscribe","isValid","next","token","post","register","user","pipe","response","access_token","saveToken","login","email","password","cookie","httpOnly","secure","error","console","Error","setItem","getTokens","asObservable","getUserInfoFromToken","getToken","base64Url","split","base64","replace","payload","decodeURIComponent","atob","c","charCodeAt","toString","slice","join","JSON","parse","e","getValue","refreshToken","getRefreshToken","logout","removeItem","setLoggedIn","value","isLoggedIn","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DRAGISA\\projects\\rent-a-car\\rent-a-car-frontend\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, catchError, Observable, tap, throwError} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {User} from \"../model/user\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private registerUrl = 'http://localhost:8080/api/v1/auth/register';\n    private authenticationUrl = `http://localhost:8080/api/v1/auth/authenticate`;\n    private tokenSubject: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n    private loggedIn = new BehaviorSubject<boolean>(false);\n\n    constructor(private http: HttpClient) {\n        const storedToken = localStorage.getItem('token');\n        if (storedToken) {\n            this.validateToken(storedToken).subscribe(isValid => {\n                if (isValid) {\n                    this.tokenSubject.next(storedToken);\n                    this.loggedIn.next(true);\n                }\n            });\n        }\n    }\n\n    private validateToken(token: string): Observable<boolean> {\n        // Backend endpoint to validate token\n        return this.http.post<boolean>('http://localhost:8080/api/v1/auth/validate', { token });\n    }\n\n    register(user: any): Observable<any> {\n        return this.http.post(this.registerUrl, user)\n            .pipe(\n                tap((response: any) => {\n                    if (response.access_token && response) {\n                        this.saveToken(response.token);\n                    }\n                })\n            );\n    }\n\n    login(email: string, password: string): Observable<any> {\n        return this.http.post<any>(this.authenticationUrl, {email, password})\n            .pipe(\n                map(response => {\n                    const token = response.access_token;\n                    response.cookie('token', token, {\n                        httpOnly: true,\n                        secure: true, // Set to true if you're using HTTPS\n                        // other options like 'expires' can be set based on requirements\n                    });\n                    //\n                    // const token = response.access_token;\n                    // if (token) {\n                    //     this.saveToken(token);\n                    //     this.tokenSubject.next(token);\n                    //     this.loggedIn.next(true);\n                    // }\n                    return response;\n                }),\n                catchError(error => {\n                    // Handle error and return a user-friendly message or rethrow\n                    console.error('Login failed', error);\n                    return throwError(() => new Error('Login failed'));\n                })\n            );\n    }\n\n    saveToken(token: string): void {\n        localStorage.setItem('token', token);\n    }\n\n    getTokens(): Observable<string> {\n        return this.tokenSubject.asObservable();\n    }\n\n    getUserInfoFromToken(): any {\n        const token = this.getToken();\n        if (!token) return null;\n\n        try {\n            const base64Url = token.split('.')[1];\n            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n            const payload = decodeURIComponent(atob(base64).split('').map(function (c) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(''));\n\n            return JSON.parse(payload);\n        } catch (e) {\n            console.error('Error parsing token', e);\n            return null;\n        }\n    }\n\n\n    getToken(): string {\n        return this.tokenSubject.getValue();\n    }\n\n    refreshToken(): Observable<any> {\n        // This URL and the request body might vary based on your backend implementation\n        return this.http.post<any>('http://localhost:8080/api/v1/auth/refresh-token', {\n            refreshToken: this.getRefreshToken()\n        }).pipe(\n            map(response => {\n                const token = response.access_token;\n                if (token) {\n                    this.saveToken(token);\n                    this.tokenSubject.next(token);\n                }\n                return response;\n            })\n        );\n    }\n\n    private getRefreshToken(): any {\n        // Assuming the refresh token is stored in local storage (or use a different method)\n        return localStorage.getItem('token');\n    }\n\n\n    logout(): void {\n        // Remove token from local storage and set subject to null\n        localStorage.removeItem('token');\n        this.tokenSubject.next(\"\");\n        this.loggedIn.next(false);\n    }\n\n    setLoggedIn(value: boolean) {\n        this.loggedIn.next(value);\n    }\n\n    isLoggedIn(): Observable<boolean> {\n        return this.loggedIn.asObservable();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}