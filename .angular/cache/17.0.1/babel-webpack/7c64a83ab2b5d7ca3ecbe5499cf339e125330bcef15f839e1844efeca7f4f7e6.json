{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class CarService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:8080/api/v1/cars'; // URL to web api\n  }\n  /** GET cars from the server */\n  getAllCars() {\n    return this.http.get(this.apiUrl).pipe(map(response => response._embedded.carList) // map the response to the carList array\n    );\n  }\n\n  addCar(carData) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.post(this.apiUrl, carData, {\n      headers\n    });\n  }\n  updateCar(carId, carData) {\n    const url = `${this.apiUrl}/${carId}`;\n    return this.http.put(url, carData, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  static #_ = this.ɵfac = function CarService_Factory(t) {\n    return new (t || CarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarService,\n    factory: CarService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","HttpHeaders","CarService","constructor","http","authService","apiUrl","getAllCars","get","pipe","response","_embedded","carList","addCar","carData","token","getToken","headers","set","post","updateCar","carId","url","put","getAuthHeaders","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DRAGISA\\projects\\rent-a-car\\rent-a-car-frontend\\src\\app\\service\\car.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Car, CarResponse} from \"../model/car\";\nimport {AuthService} from \"./auth.service\";\nimport {map} from \"rxjs/operators\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CarService {\n    private apiUrl = 'http://localhost:8080/api/v1/cars';  // URL to web api\n\n    constructor(\n        private http: HttpClient,\n        private authService: AuthService\n    ) {\n    }\n\n    /** GET cars from the server */\n    getAllCars(): Observable<Car[]> {\n        return this.http.get<CarResponse>(this.apiUrl).pipe(\n            map(response => response._embedded.carList) // map the response to the carList array\n        );\n    }\n\n    addCar(carData: any) {\n        const token = this.authService.getToken();\n        const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n        return this.http.post(this.apiUrl, carData, {headers});\n    }\n\n    updateCar(carId: number, carData: Car): Observable<Car> {\n        const url = `${this.apiUrl}/${carId}`;\n        return this.http.put<Car>(url, carData, { headers: this.getAuthHeaders() });\n    }\n}\n"],"mappings":"AAIA,SAAQA,GAAG,QAAO,gBAAgB;AAClC,SAAoBC,WAAW,QAAO,sBAAsB;;;;AAK5D,OAAM,MAAOC,UAAU;EAGnBC,YACYC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAJf,KAAAC,MAAM,GAAG,mCAAmC,CAAC,CAAE;EAMvD;EAEA;EACAC,UAAUA,CAAA;IACN,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAc,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CAC/CT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,OAAO,CAAC,CAAC;KAC/C;EACL;;EAEAC,MAAMA,CAACC,OAAY;IACf,MAAMC,KAAK,GAAG,IAAI,CAACV,WAAW,CAACW,QAAQ,EAAE;IACzC,MAAMC,OAAO,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CAAC,eAAe,EAAE,UAAUH,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACX,IAAI,CAACe,IAAI,CAAC,IAAI,CAACb,MAAM,EAAEQ,OAAO,EAAE;MAACG;IAAO,CAAC,CAAC;EAC1D;EAEAG,SAASA,CAACC,KAAa,EAAEP,OAAY;IACjC,MAAMQ,GAAG,GAAG,GAAG,IAAI,CAAChB,MAAM,IAAIe,KAAK,EAAE;IACrC,OAAO,IAAI,CAACjB,IAAI,CAACmB,GAAG,CAAMD,GAAG,EAAER,OAAO,EAAE;MAAEG,OAAO,EAAE,IAAI,CAACO,cAAc;IAAE,CAAE,CAAC;EAC/E;EAAC,QAAAC,CAAA,G;qBAzBQvB,UAAU,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAV9B,UAAU;IAAA+B,OAAA,EAAV/B,UAAU,CAAAgC,IAAA;IAAAC,UAAA,EAFP;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}