{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.registerUrl = 'http://localhost:8080/api/v1/auth/register';\n      this.authenticationUrl = `http://localhost:8080/api/v1/auth/authenticate`;\n      this.tokenSubject = new BehaviorSubject(\"\");\n      this.loggedIn = new BehaviorSubject(false);\n      // Initialize with token from storage if it exists\n      const storedToken = localStorage.getItem('token');\n      if (storedToken) {\n        this.tokenSubject.next(storedToken);\n      }\n    }\n    register(user) {\n      return this.http.post(this.registerUrl, user).pipe(tap(response => {\n        if (response.access_token && response) {\n          this.saveToken(response.token);\n        }\n      }));\n    }\n    login(email, password) {\n      return this.http.post(this.authenticationUrl, {\n        email,\n        password\n      }).pipe(map(response => {\n        const token = response.access_token;\n        if (token) {\n          this.saveToken(token);\n          this.tokenSubject.next(token);\n          this.loggedIn.next(true);\n        }\n        return response;\n      }));\n    }\n    saveToken(token) {\n      localStorage.setItem('token', token);\n    }\n    getTokens() {\n      return this.tokenSubject.asObservable();\n    }\n    getToken() {\n      console.log(\"this.tokenSubject.getValue(): \" + this.tokenSubject.getValue());\n      return this.tokenSubject.getValue();\n    }\n    logout() {\n      // Remove token from local storage and set subject to null\n      localStorage.removeItem('token');\n      this.tokenSubject.next(\"\");\n      this.loggedIn.next(false);\n    }\n    setLoggedIn(value) {\n      this.loggedIn.next(value);\n    }\n    isLoggedIn() {\n      return this.loggedIn.asObservable();\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}