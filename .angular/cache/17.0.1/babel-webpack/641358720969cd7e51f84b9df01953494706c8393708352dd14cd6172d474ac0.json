{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from \"../model/user\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.registerUrl = 'http://localhost:8080/api/v1/auth/register';\n    this.authenticationUrl = `http://localhost:8080/api/v1/auth/authenticate`;\n    this.tokenSubject = new BehaviorSubject(\"\");\n    this.loggedIn = new BehaviorSubject(false);\n    // Initialize with token from storage if it exists\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      this.tokenSubject.next(storedToken);\n    }\n  }\n  register(user) {\n    return this.http.post(this.registerUrl, user).pipe(tap(response => {\n      if (response.access_token && response) {\n        this.saveToken(response.token);\n      }\n    }));\n  }\n  login(email, password) {\n    return this.http.post(this.authenticationUrl, {\n      email,\n      password\n    }).pipe(map(response => {\n      const token = response.access_token;\n      if (token) {\n        this.saveToken(token);\n        this.tokenSubject.next(token);\n        this.loggedIn.next(true);\n      }\n      return response;\n    }));\n  }\n  saveToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getTokens() {\n    return this.tokenSubject.asObservable();\n  }\n  getUserInfoFromToken() {\n    const token = this.getToken();\n    console.log(token);\n    if (!token) return null;\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const payload = JSON.parse(atob(base64));\n      return new User(payload.id, payload.firstname, payload.lastname, payload.email, \"\");\n    } catch (e) {\n      console.error('Error parsing token', e);\n      return null;\n    }\n  }\n  getToken() {\n    console.log(\"this.tokenSubject.getValue(): \" + this.tokenSubject.getValue());\n    return this.tokenSubject.getValue();\n  }\n  logout() {\n    // Remove token from local storage and set subject to null\n    localStorage.removeItem('token');\n    this.tokenSubject.next(\"\");\n    this.loggedIn.next(false);\n  }\n  setLoggedIn(value) {\n    this.loggedIn.next(value);\n  }\n  isLoggedIn() {\n    return this.loggedIn.asObservable();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","tap","map","User","AuthService","constructor","http","registerUrl","authenticationUrl","tokenSubject","loggedIn","storedToken","localStorage","getItem","next","register","user","post","pipe","response","access_token","saveToken","token","login","email","password","setItem","getTokens","asObservable","getUserInfoFromToken","getToken","console","log","base64Url","split","base64","replace","payload","JSON","parse","atob","id","firstname","lastname","e","error","getValue","logout","removeItem","setLoggedIn","value","isLoggedIn","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DRAGISA\\projects\\rent-a-car\\rent-a-car-frontend\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {BehaviorSubject, Observable, tap} from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport {User} from \"../model/user\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private registerUrl = 'http://localhost:8080/api/v1/auth/register';\n  private authenticationUrl = `http://localhost:8080/api/v1/auth/authenticate`;\n  private tokenSubject: BehaviorSubject<string> = new BehaviorSubject<string>(\"\");\n  private loggedIn = new BehaviorSubject<boolean>(false);\n\n  constructor(private http: HttpClient) {\n    // Initialize with token from storage if it exists\n    const storedToken = localStorage.getItem('token');\n    if (storedToken) {\n      this.tokenSubject.next(storedToken);\n    }\n  }\n\n  register(user: any): Observable<any> {\n    return this.http.post(this.registerUrl, user)\n      .pipe(\n      tap((response: any) => {\n        if (response.access_token && response) {\n          this.saveToken(response.token);\n        }\n      })\n    );\n  }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post<any>(this.authenticationUrl, { email, password })\n      .pipe(map(response => {\n        const token = response.access_token;\n        if (token) {\n          this.saveToken(token);\n          this.tokenSubject.next(token);\n          this.loggedIn.next(true);\n        }\n        return response;\n      }));\n  }\n\n  saveToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  getTokens(): Observable<string> {\n    return this.tokenSubject.asObservable();\n  }\n\n  getUserInfoFromToken(): User | null {\n    const token = this.getToken();\n\n    console.log(token);\n\n    if (!token) return null;\n\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const payload = JSON.parse(atob(base64));\n\n      return new User(\n        payload.id,\n        payload.firstname,\n        payload.lastname,\n        payload.email,\n        \"\"\n      );\n    } catch (e) {\n      console.error('Error parsing token', e);\n      return null;\n    }\n  }\n\n\n  getToken(): string {\n    console.log(\"this.tokenSubject.getValue(): \" + this.tokenSubject.getValue());\n    return this.tokenSubject.getValue();\n  }\n\n  logout(): void {\n    // Remove token from local storage and set subject to null\n    localStorage.removeItem('token');\n    this.tokenSubject.next(\"\");\n    this.loggedIn.next(false);\n  }\n\n  setLoggedIn(value: boolean) {\n    this.loggedIn.next(value);\n  }\n\n  isLoggedIn(): Observable<boolean> {\n    return this.loggedIn.asObservable();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}