{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class CarService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:8080/api/v1/cars'; // URL to web api\n  }\n  /** GET cars from the server */\n  getAllCars() {\n    return this.http.get(this.apiUrl).pipe(map(response => response._embedded.carList) // map the response to the carList array\n    );\n  }\n\n  addCar(carData) {\n    return this.http.post(this.apiUrl, carData, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  updateCar(carId, carData) {\n    const token = this.getAuthHeaders();\n    token.keys().forEach(key => {\n      if (!token.has(key)) token.set(key, token.get(key));\n    });\n    carData.forEach((value, key) => {\n      console.log(key, value);\n    });\n    const url = `${this.apiUrl}/${carId}`;\n    return this.http.put(url, carData, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getAuthHeaders() {\n    const token = this.authService.getToken(); // Assuming you have a method to get the token\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  static #_ = this.ɵfac = function CarService_Factory(t) {\n    return new (t || CarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarService,\n    factory: CarService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","HttpHeaders","CarService","constructor","http","authService","apiUrl","getAllCars","get","pipe","response","_embedded","carList","addCar","carData","post","headers","getAuthHeaders","updateCar","carId","token","keys","forEach","key","has","set","value","console","log","url","put","getToken","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DRAGISA\\projects\\rent-a-car\\rent-a-car-frontend\\src\\app\\service\\car.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Car, CarResponse} from \"../model/car\";\nimport {AuthService} from \"./auth.service\";\nimport {map} from \"rxjs/operators\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CarService {\n  private apiUrl = 'http://localhost:8080/api/v1/cars';  // URL to web api\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n  }\n\n  /** GET cars from the server */\n  getAllCars(): Observable<Car[]> {\n    return this.http.get<CarResponse>(this.apiUrl).pipe(\n      map(response => response._embedded.carList) // map the response to the carList array\n    );\n  }\n\n  addCar(carData: any) {\n    return this.http.post(this.apiUrl, carData, {headers: this.getAuthHeaders()});\n  }\n\n  updateCar(carId: number, carData: any): Observable<Car> {\n\n    const token = this.getAuthHeaders();\n\n    token.keys().forEach(key => {\n\n      if (!token.has(key)) token.set(key, token.get(key))\n\n    })\n\n    carData.forEach((value: any, key: any) => {\n      console.log(key, value);\n    });\n\n    const url = `${this.apiUrl}/${carId}`;\n    return this.http.put<Car>(url, carData, {headers: this.getAuthHeaders()});\n  }\n\n  private getAuthHeaders(): HttpHeaders {\n    const token = this.authService.getToken(); // Assuming you have a method to get the token\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n}\n"],"mappings":"AAIA,SAAQA,GAAG,QAAO,gBAAgB;AAClC,SAAoBC,WAAW,QAAO,sBAAsB;;;;AAK5D,OAAM,MAAOC,UAAU;EAGrBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAJb,KAAAC,MAAM,GAAG,mCAAmC,CAAC,CAAE;EAMvD;EAEA;EACAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAc,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CACjDT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,OAAO,CAAC,CAAC;KAC7C;EACH;;EAEAC,MAAMA,CAACC,OAAY;IACjB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,IAAI,CAACT,MAAM,EAAEQ,OAAO,EAAE;MAACE,OAAO,EAAE,IAAI,CAACC,cAAc;IAAE,CAAC,CAAC;EAC/E;EAEAC,SAASA,CAACC,KAAa,EAAEL,OAAY;IAEnC,MAAMM,KAAK,GAAG,IAAI,CAACH,cAAc,EAAE;IAEnCG,KAAK,CAACC,IAAI,EAAE,CAACC,OAAO,CAACC,GAAG,IAAG;MAEzB,IAAI,CAACH,KAAK,CAACI,GAAG,CAACD,GAAG,CAAC,EAAEH,KAAK,CAACK,GAAG,CAACF,GAAG,EAAEH,KAAK,CAACZ,GAAG,CAACe,GAAG,CAAC,CAAC;IAErD,CAAC,CAAC;IAEFT,OAAO,CAACQ,OAAO,CAAC,CAACI,KAAU,EAAEH,GAAQ,KAAI;MACvCI,OAAO,CAACC,GAAG,CAACL,GAAG,EAAEG,KAAK,CAAC;IACzB,CAAC,CAAC;IAEF,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACvB,MAAM,IAAIa,KAAK,EAAE;IACrC,OAAO,IAAI,CAACf,IAAI,CAAC0B,GAAG,CAAMD,GAAG,EAAEf,OAAO,EAAE;MAACE,OAAO,EAAE,IAAI,CAACC,cAAc;IAAE,CAAC,CAAC;EAC3E;EAEQA,cAAcA,CAAA;IACpB,MAAMG,KAAK,GAAG,IAAI,CAACf,WAAW,CAAC0B,QAAQ,EAAE,CAAC,CAAC;IAC3C,OAAO,IAAI9B,WAAW,CAAC;MACrB,eAAe,EAAE,UAAUmB,KAAK,EAAE;MAClC,cAAc,EAAE;KACjB,CAAC;EACJ;EAAC,QAAAY,CAAA,G;qBA5CU9B,UAAU,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVrC,UAAU;IAAAsC,OAAA,EAAVtC,UAAU,CAAAuC,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}