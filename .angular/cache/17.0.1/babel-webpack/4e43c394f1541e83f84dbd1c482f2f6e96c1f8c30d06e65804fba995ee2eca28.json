{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { map } from \"rxjs/operators\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class CarService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:8080/api/v1/cars'; // URL to web api\n  }\n  /** GET cars from the server */\n  getAllCars() {\n    const headers = this.getAuthHeaders();\n    return this.http.get(this.apiUrl, {\n      headers\n    }).pipe(map(response => response._embedded.carList) // map the response to the carList array\n    );\n  }\n\n  addCar(carData) {\n    return this.http.post(this.apiUrl, carData, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  updateCar(carId, carData) {\n    const url = `${this.apiUrl}/${carId}`;\n    const headers = this.getAuthHeaders();\n    return this.http.put(url, carData, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    // You can customize this further based on your needs\n    // and possibly based on different types of errors\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    // Return an observable with a user-facing error message\n    return throwError(errorMessage);\n  }\n  getAuthHeaders() {\n    const token = this.authService.getToken(); // Retrieve token from AuthService or similar service\n    if (!token) {\n      throw new Error(\"No token found\"); // Optionally, you can handle cases where the token is not available\n    }\n\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  static #_ = this.ɵfac = function CarService_Factory(t) {\n    return new (t || CarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarService,\n    factory: CarService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","throwError","map","HttpHeaders","CarService","constructor","http","authService","apiUrl","getAllCars","headers","getAuthHeaders","get","pipe","response","_embedded","carList","addCar","carData","post","updateCar","carId","url","put","handleError","error","errorMessage","ErrorEvent","message","status","console","token","getToken","Error","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DRAGISA\\projects\\rent-a-car\\rent-a-car-frontend\\src\\app\\service\\car.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {catchError, Observable, throwError} from 'rxjs';\nimport {Car, CarResponse} from \"../model/car\";\nimport {AuthService} from \"./auth.service\";\nimport {map} from \"rxjs/operators\";\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CarService {\n  private apiUrl = 'http://localhost:8080/api/v1/cars';  // URL to web api\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n  }\n\n  /** GET cars from the server */\n  getAllCars(): Observable<Car[]> {\n    const headers = this.getAuthHeaders();\n    return this.http.get<CarResponse>(this.apiUrl, { headers }).pipe(\n      map(response => response._embedded.carList) // map the response to the carList array\n    );\n  }\n\n  addCar(carData: any) {\n    return this.http.post(this.apiUrl, carData, {headers: this.getAuthHeaders()});\n  }\n\n  updateCar(carId: number, carData: any): Observable<Car> {\n    const url = `${this.apiUrl}/${carId}`;\n    const headers = this.getAuthHeaders();\n\n    return this.http.put<Car>(url, carData, { headers }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    // You can customize this further based on your needs\n    // and possibly based on different types of errors\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    // Return an observable with a user-facing error message\n    return throwError(errorMessage);\n  }\n\n\n  private getAuthHeaders(): HttpHeaders {\n    const token = this.authService.getToken(); // Retrieve token from AuthService or similar service\n    if (!token) {\n      throw new Error(\"No token found\"); // Optionally, you can handle cases where the token is not available\n    }\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      \n    });\n  }\n}\n"],"mappings":"AACA,SAAQA,UAAU,EAAcC,UAAU,QAAO,MAAM;AAGvD,SAAQC,GAAG,QAAO,gBAAgB;AAClC,SAAuCC,WAAW,QAAO,sBAAsB;;;;AAK/E,OAAM,MAAOC,UAAU;EAGrBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAJb,KAAAC,MAAM,GAAG,mCAAmC,CAAC,CAAE;EAMvD;EAEA;EACAC,UAAUA,CAAA;IACR,MAAMC,OAAO,GAAG,IAAI,CAACC,cAAc,EAAE;IACrC,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAc,IAAI,CAACJ,MAAM,EAAE;MAAEE;IAAO,CAAE,CAAC,CAACG,IAAI,CAC9DX,GAAG,CAACY,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,OAAO,CAAC,CAAC;KAC7C;EACH;;EAEAC,MAAMA,CAACC,OAAY;IACjB,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAC,IAAI,CAACX,MAAM,EAAEU,OAAO,EAAE;MAACR,OAAO,EAAE,IAAI,CAACC,cAAc;IAAE,CAAC,CAAC;EAC/E;EAEAS,SAASA,CAACC,KAAa,EAAEH,OAAY;IACnC,MAAMI,GAAG,GAAG,GAAG,IAAI,CAACd,MAAM,IAAIa,KAAK,EAAE;IACrC,MAAMX,OAAO,GAAG,IAAI,CAACC,cAAc,EAAE;IAErC,OAAO,IAAI,CAACL,IAAI,CAACiB,GAAG,CAAMD,GAAG,EAAEJ,OAAO,EAAE;MAAER;IAAO,CAAE,CAAC,CAACG,IAAI,CACvDb,UAAU,CAAC,IAAI,CAACwB,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAWA,CAACC,KAAwB;IAC1C;IACA;IACA,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;IAC3B;IACA,OAAOzB,UAAU,CAACyB,YAAY,CAAC;EACjC;EAGQf,cAAcA,CAAA;IACpB,MAAMoB,KAAK,GAAG,IAAI,CAACxB,WAAW,CAACyB,QAAQ,EAAE,CAAC,CAAC;IAC3C,IAAI,CAACD,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;;;IAErC,OAAO,IAAI9B,WAAW,CAAC;MACrB,eAAe,EAAE,UAAU4B,KAAK;KAEjC,CAAC;EACJ;EAAC,QAAAG,CAAA,G;qBAxDU9B,UAAU,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVrC,UAAU;IAAAsC,OAAA,EAAVtC,UAAU,CAAAuC,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}